if(y[j] != label[j]){
num = num + weights[j];
}
}
error = num/denom;
alpha[i] = log((1-error)/error);
for(z in 1:size){
if(y[z]!=label[z]){
weights[z] = weights[z]*((1-error)/error);
}
}
}
c_hat = agg_class(X, alpha, allPars)
return (c_hat)
}
#AdaBoost2
#used for CV: does the same procedure but returns the alphas and
#parameters of the resulting boosting classifier.
AdaBoost2 = function(X, y, B){
size = ncol(X);
weights = rep(1/size, size);
allPars = matrix(ncol = 3, nrow = 0);
alpha = rep(NA, B);
for (i in 1:B){
pars = train(X, weights, y);
allPars = rbind(allPars, pars)
label = classify(X, pars);
denom = sum(weights);
num =0;
for(j in 1:size){
if(y[j] != label[j]){
num = num + weights[j];
}
}
error = num/denom;
alpha[i] = log((1-error)/error);
for(z in 1:size){
if(y[z]!=label[z]){
weights[z] = weights[z]*((1-error)/error);
}
}
}
return (list(alpha, allPars))
}
#Cross-Validation
#using 5 weak learners
b=c(1:5);
x = rep(0,5);#average training errors
y = rep(0,5);#test errors
#Generate vector of 40 numbers (20% of 200) from 1 to 200, no duplicates.
#Contains row indices to be used for test case.
randvec = sample(1:200, size = 40, replace = FALSE)
randvec = sort(randvec)
#testset contains the test data
testset = matrix(nrow = 256, ncol = 0)
testset = cbind(testset, uspsdata[,randvec])
#otherdata contains training data (everything other than test data)
otherdata = uspsdata[,-randvec]
#othercl contains classifiers for the training data
othercl = uspscl[-(randvec)]
#putting test set classifiers into testcl from uspscl (only the indices
#corresponding to those in randvec)
testcl= uspscl[randvec]
split = sample(1:5, length(othercl), replace = T)
for(i in 1:5){#number of weak learners
for(j in 1:5){#number of blocks
x_train = otherdata[,split!=j]
y_train = othercl[split!=j]
x_valid = otherdata[,split==j]
y_valid = othercl[split==j]
trainpars = AdaBoost2(x_train, y_train, i)
est = agg_class(x_valid, trainpars[[1]],trainpars[[2]])
res = y_valid - est
error = (length(y_valid)-sum(res==0))/length(y_valid)
x[i] = x[i] + error
}
x[i]=x[i]/5
testpars = AdaBoost2(otherdata, othercl, i)
testest = agg_class(testset, testpars[[1]], testpars[[2]] )
testres = testcl - testest
testerror = (length(testcl)-sum(testest==0))/length(testcl)
y[i] = y[i] + testerror
}
x
y
testset
ncol(testset)
testcl
randvec
uspscl
#Problem 3
#Part 1: train, classify, agg_class
train = function(X, w, y){
denom = sum(w);
parsmatrix = matrix(ncol = 4, nrow = 0);
dimension = nrow(X)
for(j in 1:dimension){
bestthetaerror = 1; #holds best error given j
thetagj = 0; #holds best parameter theta given j
idealm = 0; #holds best parameter m for given j
for(theta in 0: 240){
nump = 0; #numerator of error rate for m>0
numn = 0; #numerator of error rate for m<0
errorp = 0; #error for m>0
errorn = 0; #error for m<0
errortheta = 0; #running track of error
for(i in 1:ncol(X)){#this is for m>0
if(y[i]>0&&X[j,i]<=theta||y[i]<0&&X[j,i]>theta){
nump = nump + w[i];
}
}#end for loop through data vectors
errorp = nump/denom;
errorn = 1 - errorp
if(errorn > errorp){
m = 1;
errortheta = errorp;
}
else{
m = -1;
errortheta = errorn;
}
if(errortheta < bestthetaerror){
bestthetaerror = errortheta;
idealm = m;
thetagj = theta;
}
}#end for loop through theta
vector = c(j, thetagj, idealm, bestthetaerror);
parsmatrix = rbind(parsmatrix, vector);
}#end for loop through j
bestrow = which.min(parsmatrix[,4]);
pars = as.list(parsmatrix[bestrow,-4]);
return(pars);
}#end function
classify = function(X, pars){
label = vector(length = ncol(X));
axis = pars[[1]];
theta = pars[[2]];
m = pars[[3]];
for(i in 1:ncol(X)){
if(X[axis, i]>theta){
if(m>0){
label[i] = 1;
}
else{
label[i] = -1;
}
}
else{
if(m>0){
label[i] = -1;
}
else{
label[i] = 1;
}
}
}
return(label);
}
agg_class = function(X, alpha, allPars){
sum = 0;
num = length(alpha);
for(i in 1: num){
sum = sum + alpha[i]*classify(X, allPars[i,])
}
c_hat = sign(sum);
return(c_hat);
}
#AdaBoost
AdaBoost = function(X, y, B){
size = ncol(X);
weights = rep(1/size, size);
allPars = matrix(ncol = 3, nrow = 0);
alpha = rep(NA, B);
for (i in 1:B){
pars = train(X, weights, y);
allPars = rbind(allPars, pars)
label = classify(X, pars);
denom = sum(weights);
num =0;
for(j in 1:size){
if(y[j] != label[j]){
num = num + weights[j];
}
}
error = num/denom;
alpha[i] = log((1-error)/error);
for(z in 1:size){
if(y[z]!=label[z]){
weights[z] = weights[z]*((1-error)/error);
}
}
}
c_hat = agg_class(X, alpha, allPars)
return (c_hat)
}
#AdaBoost2
#used for CV: does the same procedure but returns the alphas and
#parameters of the resulting boosting classifier.
AdaBoost2 = function(X, y, B){
size = ncol(X);
weights = rep(1/size, size);
allPars = matrix(ncol = 3, nrow = 0);
alpha = rep(NA, B);
for (i in 1:B){
pars = train(X, weights, y);
allPars = rbind(allPars, pars)
label = classify(X, pars);
denom = sum(weights);
num =0;
for(j in 1:size){
if(y[j] != label[j]){
num = num + weights[j];
}
}
error = num/denom;
alpha[i] = log((1-error)/error);
for(z in 1:size){
if(y[z]!=label[z]){
weights[z] = weights[z]*((1-error)/error);
}
}
}
return (list(alpha, allPars))
}
#Cross-Validation
#using 5 weak learners
b=c(1:5);
x = rep(0,5);#average training errors
y = rep(0,5);#test errors
#Generate vector of 40 numbers (20% of 200) from 1 to 200, no duplicates.
#Contains row indices to be used for test case.
randvec = sample(1:200, size = 40, replace = FALSE)
randvec = sort(randvec)
#testset contains the test data
testset = matrix(nrow = 256, ncol = 0)
testset = cbind(testset, uspsdata[,randvec])
#otherdata contains training data (everything other than test data)
otherdata = uspsdata[,-randvec]
#othercl contains classifiers for the training data
othercl = uspscl[-(randvec)]
#putting test set classifiers into testcl from uspscl (only the indices
#corresponding to those in randvec)
testcl= uspscl[randvec]
split = sample(1:5, length(othercl), replace = T)
for(i in 1:5){#number of weak learners
for(j in 1:5){#number of blocks
x_train = otherdata[,split!=j]
y_train = othercl[split!=j]
x_valid = otherdata[,split==j]
y_valid = othercl[split==j]
trainpars = AdaBoost2(x_train, y_train, i)
est = agg_class(x_valid, trainpars[[1]],trainpars[[2]])
res = y_valid - est
error = (length(y_valid)-sum(res==0))/length(y_valid)
x[i] = x[i] + error
}
x[i]=x[i]/5
testpars = AdaBoost2(otherdata, othercl, i)
testest = agg_class(testset, testpars[[1]], testpars[[2]] )
testres = testcl - testest
testerror = (length(testcl)-sum(testres==0))/length(testcl)
y[i] = y[i] + testerror
}
x
y
b
plot(b, x, main="Training Error vs b", xlab = "b", ylab = "Training Error")
plot(b, y, main = "Test Error vs b", xlab = "b", ylab = "Test Error")
curve(exp(-x),from=0,to=4)
x=c(1,2,4)
y=exp(-x)
points(x,y)
words = c("x=1","x=2","x=4")
text(x,y,words)
curve(exp(-x),from=0,to=4)
> x=c(1,2,4)
> y=exp(-x)
> points(x,y)
curve(exp(-x),from=0,to=4)
x=c(1,2,4)
y=exp(-x)
points(x,y)
samples = rexp(256)
alpha = 2
beta = .2
curve(dgamma(shape = 2 + 4, rate = .2+samples[1:4]),from=0, to=4)
curve(dgamma(x,shape = 2 + 4, rate = .2+samples[1:4]),from=0, to=4)
x
curve(dgamma(y,shape = 2 + 4, rate = .2+samples[1:4]),from=0, to=4)
x = seq(0:4, by = 0.01)
x = seq(from=0, to=4, by = 0.01)
curve(dgamma(x,shape = 2 + 4, rate = .2+samples[1:4]),from=0, to=4)
clear
clear()
samples
samples[1:4]
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0, to=4)
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0, to=4,col="blue")
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0, to=4,col="blue",ylab = "probability")
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0, to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0, to=4,col="green",add=TRUE)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0, to=4,col="black",add=TRUE)
sum(samples[1:4])
plot(ylim=c(0,2))
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0,
to=4,col="blue",ylab = "probability")
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0,
to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0,
to=4,col="green",add=TRUE)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0,
to=4,col="black",add=TRUE)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0,
to=4,col="black",ylab = "probability")
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0,
to=4,col="blue",add=TRUE)
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0,
to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0,
to=4,col="green",add=TRUE)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0,
to=4,col="black",ylab = "density")
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0,
to=4,col="blue",add=TRUE)
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0,
to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0,
to=4,col="green",add=TRUE)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0,
to=4,col="black",ylab = "density")
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0,
to=4,col="blue",add=TRUE)
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0,
to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0,
to=4,col="green",add=TRUE)
legend('topright', c("n=4","n=8", "n=16", "n=256") ,
lty=1, col=c('blue', 'red', 'green',' black'), bty='n', cex=.75)
curve(dgamma(x,shape = 2 + 256, rate = .2+sum(samples[1:256])),from=0,
to=4,col="black",xlab = "theta",ylab = "density")
curve(dgamma(x,shape = 2 + 4, rate = .2+sum(samples[1:4])),from=0,
to=4,col="blue",add=TRUE)
curve(dgamma(x,shape = 2 + 8, rate = .2+sum(samples[1:8])),from=0,
to=4,col="red",add=TRUE)
curve(dgamma(x,shape = 2 + 16, rate = .2+sum(samples[1:16])),from=0,
to=4,col="green",add=TRUE)
legend('topright', c("n=4","n=8", "n=16", "n=256") ,
lty=1, col=c('blue', 'red', 'green',' black'), bty='n', cex=.75)
cumsum(1:4)
cumprod(1:4)
4:2
cummin(1:4)
cummax(1:4)
library(nycflights13)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(MASS)
data()
UCBAdmissions
airquality
Titanic
Animals
filter(Animals, body>5)
arrange(Animals, brain)
select(Animals, brain)
select(Animals, body)
rename(Animals, brain = BRAINS)
rename(Animals, BRAINS = brain)
mutate(Animals, sum = brain + body)
summarise(Animals, brain)
library(data.table)
install.packages("shiny")
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/Eric/Desktop/UCShiny/UC')
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
View(nba)
library(ggplot2)
nba.m <- melt(nba)
install.packages("reshape2")
library(reshape2)
nba.m <- melt(nba)
View(nba.m)
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
install.packages("plyr")
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
library(plyr)
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
library(ggplot2)
library(reshape2)
library(plyr)
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
install.packages("arm")
library(arm)
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
View(nba.m)
(p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white",
+     high = "steelblue"))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+ colour = "white") + scale_fill_gradient(low = "white",
+ high = "steelblue")
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
p
View(UCDatalong)
library(ggplot2)
library(tidyr)
library(data.table)
UCData <- fread("UCData.csv")
#reformat data
UCDatalong <- gather(UCData, Stats, NumberOfStudents, UCBApplicants:UCMEnrollees)
UCDatalong$Stats <- factor(UCDatalong$Stats, levels = UCDatalong$Stats[order(UCDatalong$Stats)])
setwd("~/")
setwd("C:/Users/Eric/Desktop/UCShiny/UC/data")
library(ggplot2)
library(tidyr)
library(data.table)
UCData <- fread("UCData.csv")
#reformat data
UCDatalong <- gather(UCData, Stats, NumberOfStudents, UCBApplicants:UCMEnrollees)
UCDatalong$Stats <- factor(UCDatalong$Stats, levels = UCDatalong$Stats[order(UCDatalong$Stats)])
library(ggplot2)
library(tidyr)
library(data.table)
UCData <- fread("UCData.csv")
#reformat data
UCDatalong <- gather(UCData, Stats, NumberOfStudents, UCBApplicants:UCMEnrollees)
View(UCDatalong)
UCDatareg<- UCDatalong[-grep(pattern = "Admits", x=x),]
View(UCDatareg)
UCDatareg<- UCDatalong[-grep(pattern = "Admits", x=UCDatalong$Stats),]
View(UCDatareg)
UCDatareg<- UCDatalong[grep(pattern = "Admits", x=UCDatalong$Stats),]
View(UCDatareg)
shiny::runApp('C:/Users/Eric/Desktop/UCShiny/UC')
View(UCData)
View(nba.m)
(p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue"))
(p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue"))
p
(p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue"))+ggtitle("Admits Heatmap")
p
(p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue"))+labs(title = "Admits Heatmap")
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap")
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
+ labs(x= gsub(pattern = "Admits", replacement = "",x=Stats))
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
+ labs(x= gsub(pattern = "Admits", replacement = "",x=UCDatalong$Stats))
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")+
labs(x= gsub(pattern = "Admits", replacement = "",x=UCDatalong$Stats))
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")+
labs(y= gsub(pattern = "Admits", replacement = "",x=UCDatalong$Stats))
p
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
p
UCDatareg$Stats= gsub(pattern = "Admits", replacement = "",x=UCDatalong$Stats)
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
p
UCDatareg$Stats= gsub(pattern = "Admits", replacement = "",x=UCDatareg$Stats)
p <- ggplot(UCDatareg, aes(Year, Stats)) + geom_tile(aes(fill = NumberOfStudents),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+labs(title = "Admits Heatmap", y = "Admits", fill = "Number of Students")
p
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
runApp('C:/Users/Eric/Desktop/UCShiny/UC')
